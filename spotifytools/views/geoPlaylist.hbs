<h1>{{project}}</h1>
<p>This project is for {{reason}}</p>
<p>This project is the culmination of a bunch of different APIs used to create a personally curated Spotify playlist based on artists located near a selected area.</p>
<a href="/geoPlaylist/map" class="btn btn-secondary" id="gotoloading">Begin</a>
<br><br>
<p>Press the button above to begin using the app, and below you will find a bare-bones report with the list of api's used.</p>
<u><p>API's Used</p></u>
<p>
    <ul>
        <li><code>Spotify's Developer API</code>
            <ul>
                <li><a href="https://developer.spotify.com/documentation/general/guides/authorization-guide/" target="_blank" class="btn" id="authentication">Authentication</a></li>
                <li><a href="https://developer.spotify.com/console/get-search-item/" target="_blank" class="btn" id="search">Search</a></li>
                <li><a href="https://developer.spotify.com/console/get-current-user-top-artists-and-tracks/" target="_blank" class="btn" id="personalization">Personalization</a></li>
                <li><a href="https://developer.spotify.com/console/playlists/" target="_blank" class="btn" id="playlists">Playlists</a></li>
                <li><a href="https://developer.spotify.com/console/get-current-user/" target="_blank" class="btn" id="usersProfile">User's Profile</a></li>
            </ul>
        </li>
        <li><code>Google API's</code>
            <ul>
                <li><a href="https://developers.google.com/maps/documentation/javascript/reference/#Marker" class="btn" id="mapsJavascriptAPI">Maps Javascript API</a></li>
                <li><a href="https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding" class="btn" id="geocodingAPI">Geocoding API</a></li>
                <li><a href="https://firebase.google.com/docs/firestore/use-rest-api" class="btn" id="firebase-firestore">Firebase-Firestore</a></li>
            </ul>
        </li>
        <li><code>Last.fm's API</code>
            <li><a href="https://www.last.fm/api/show/geo.getTopArtists" class="btn" id="getTopArtists">geo.getTopArtists</a></li>
        </li>
        <li><code>Loading.io</code>
            <li><a href="https://loading.io/css/" class="btn" id="loading">Loading CSS</a></li>
        </li>
    </ul>
</p>

<h1><code>Report</code></h1>

<p>This project took far longer than I expected it to. Mainly due to Spotify and Google's API requiring some sort of security authentication and framework reliability. As a result I was forced to learn a node.js framework on the fly. I chose Express as my framework as there were many examples online using the Spotify API and Express with Node.js. I'm gonna talk about the tasks that were completed really well with this project, what challenged me, and what is unfinished, because this project is incomplete. Even though it is incomplete I am proud of what I was able to accomplish, and I am happy I had this experience as this pushed me outside my developing comfort zone and forced me to try new things as a developer.</p>

<h2><code>What I was able to overcome</code></h2>

<p>The layout for the app took me about 4 days to get comfortably writing in. I began an Express/Node.js environment and then 2 days later deleted the entire thing because it wasn't working. Once I started from scratch things started to make more sense in how I routed views, and connected layouts as to make the app present itself in a seamless way. The front-end framework I am using was fairly straightforward to add to this project and it works perfectly with this app allowing me to have a structure to build more into the app / complete this task in the future. Routing the different parts of this app was hard at first, but once I got the hang of it adding new views was simple. Implementing all of the API's besides Firebase's Firestore were simple once using this framework, because there are many node packages that support components that I was using. Spotify's API was complicated at first to figure out. I needed to have something trigger the initial call to Spotify, but I really didn't know where to put the code for this feature. One of the reasons I scrapped the first project was I had the Spotify code in js file in the js folder. This created many problems when I tried to eventually call the file. In the new project this feature is taken care of in the app.js file which makes the most sense as this is the back-end of the app and that's where we want to securely make a Oauth2.0 call. As for the front-end for this feature, Spotify authentication is triggered in the accounts tab where the user authenticated their account using Oauth2.0. The backend routes you to Spotify to login and then back to the main page. With Google's API's The mapsJavascriptAPI required certain requests but was not hard to get to work. I wish it worked faster. As for the geocoding it's really just a function which was really easy for me. Last.fm's API was also pretty simple and again wasn't hard to implement. The loading screen was basic CSS manipulation and I was happy with the result. Firebase was annoying. I accidentally started using the more commercial database which required me to make an account that used free credit. Figuring out how to authenticate into this database took hours of testing the different possible ways Google has available whether that was through a node package or variable credetials and get request. Figuring out how to use all these API's was a challenge that I do believe I was able to overcome. I think the struggle I had in finishing this project stemmed from me knowing how much information is out there, but not what is reasonably publically available through APIs; thus I dreamt a little to big with the scope of my project.</p>

<h2><code><u>What I was not able to overcome</u></code></h2>

<p>Having a proper authentication to this website would have been ideal. A user would be directed to the accounts tab and would link their Google Account and Spotify Account as to use both Spotify and save their data in the firebase database. Attempting to set this up posed a tough challenge. In my opinion it is the worst part about building an app that requires any sort of user data to be saved. I wanted to host this app on Github, but I could not because then API keys are public and all of Google, Spotify and Github sent me emails yelling that I can't do this. I was not able to overcome a proper way to store the keys locally thus I could not publish to Github pages. Another thing that was very difficult was trying to get artists from a city using MusicBrainz. The data I would get would be inconsistent and unreliable, making it really hard for me to write code that would be robust enought to handle edge cases. I was not able to find a way to provide a method of top artists by city thus I went to an easier method and that was top artists by country. I am really disappointed that I was unable to get the Spotify part of this app (besides auth) working. My challenge arrose when I began making API calls to Spotify collecting artist ids, and then using those artist ids to get the top tracks. This all worked fine because I just would use the refresh token to get a new access token to get this data. This process began to break down when I went to get the user's top artists. I would get denied as my access token would expire and then when I go to request a new access token using the refresh token I would get denied for having two many api calls in such short a time. Once I realised this I knew my project could not move any further as it was Tuesday evening and I was already burnt out from pulling multiple all-nighters on this project.</p>

<h2><code><u>What is unfinished</u></code></h2>

<p>There are many aspects to this app that I wanted to impliment and I was only able to do so much. As a result, there are a fair amount of files that are just sitting in the library because I started to work on a feature and then had to scrap it due to time constraints. My first challenge that I just decided wasn't worth the time was trying to get the menu button to stay in the top left. I was able to do so, but then the button wouldn't click. Eventually I just moved on to the features of this app and focused less on the front-end. The first feature to be scrapped was the getting artists by city, however I was able to pivot, not necessarally overcome this feature as it was transformed into search by country. The following feature which was scrapped was having a normal user login experience. I wanted the app to have a user login, connect their Spotify account, and until they had done so all use features would be hidden. This proved to be quite a complicated task and I could not finish given time contrainsts. This also put a strain on how I was going to clear the data saved in firebase after the user had completed the geoPlaylist process because I had not figured out a way to organize the information in a way that would allow for this kind of functionality. I have all the pages I wanted complete but the connection from the loading screen to the results screen is unfinished as I was unable to properly get all the playlist information in a timely fashion. Had I had enough time I would have normalized fonts, created a color scheme, maybe added the user's profile picture from spotify in the top corner. That data was saved in firebase had there been time. Overall I think this task was too large to complete in 2 weeks. If I started this earlier I think I might have been able to finish, but I know, I would not have been able to start earlier because classes were still going on and I wouldn't have been able to dedicate the appropriate amount of time to such a project.</p>

<h2><code><u>What I learned</u></code></h2>

<p>I really did enjoy this experience because this is the first time I have really tried to build an app. I never really understood how hard something could be until I spent an entire day implementing a google map and 8 hours later when it finally worked (providing the least amount of functionallity) I was so satisfied. My friends were unimpressed, but I felt great! I also learned about the native structure to most modern apps, which I believe is a huge asset moving forward in my career and I will definitely appreciate having attempted this project when I go into the work force as a full time developer. This class was definitely my favourite class in my minor because it combined music and technology in a way that I actually was interested. Implementing music API's and learning about website structure and javascript are all things I enjoyed learning both in class and during this project.</p>

